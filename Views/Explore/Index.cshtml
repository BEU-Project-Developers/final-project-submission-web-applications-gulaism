@using KodlaWebApp.Models
@using KodlaWebApp.ViewModels
@model KodlaWebApp.ViewModels.ExploreViewModel

@{
    ViewData["Title"] = "Explore Courses";
}

<div class="mx-auto w-full py-100 text-center">
    <div class="mainBg h-600 pt-180 mb-111">
        <div class="pb-11">
            <div class="text-45 fw-bold text-yellow">Camp and Course Catalog</div>
            <div class="text-22 fw-medium textMain pb-12">Search for the camp you want.</div>
        </div>
        <div class="pb-67 px-370">
            <div class="position-relative">
                <input type="text" id="courseSearchInput" class="form-control rounded-pill py-3 ps-5" placeholder="Search by title or description" />
                <button id="searchButton" class="mainBg border-0 text-white py-2 px-3 rounded-pill position-absolute end-0 top-50 translate-middle-y me-3"><i class="bi bi-search"></i></button>
            </div>
        </div>
    </div>

    @if (Model.Courses != null && Model.Courses.Any())
    {
        <div>
            <div class="text-45 fw-bold textLightPurple pb-11">Featured Camps</div>
            <div class="text-22 fw-medium textBrown pb-67">Find the camp you want on the topic you want and start learning.</div>
        </div>
        <div class="px-90 d-grid grid-template-cols-3 gap-5" id="featuredCoursesContainer">
            @* Featured courses will be rendered here by JavaScript *@
        </div>

        <div class="container-fluid px-90 pt-129">
            <h2 class="text-40 fw-bold textLightPurple pb-12">All Camps and Courses</h2>
            <div class="row">
                <div class="col-md-3 text-start">
                    <div class="mb-4 border rounded-3 p-3">
                        <h6 class="textLightPurple fw-bold mb-3">Filter By:</h6>

                        <div class="mb-3 pb-3 border-bottom">
                            <h6 class="textGray fw-bold mb-2">Categories</h6>
                            <ul class="list-unstyled" id="categoryFilterContainer">
                                @* Categories will be dynamically populated here by JavaScript *@
                            </ul>
                        </div>

                        <div class="mb-3 pb-3 border-bottom">
                            <h6 class="textGray fw-bold mb-2">Instructors</h6>
                            <input type="text" id="instructorSearchInput" class="form-control form-control-sm rounded-pill" placeholder="Search Instructor">
                        </div>

                        <div class="mb-3 pb-3 border-bottom">
                            <h6 class="textGray fw-bold mb-2">Ratings</h6>
                            <ul class="list-unstyled" id="ratingFilterContainer">
                                <li>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="rating" id="ratingAll" value="0" checked>
                                        <label class="form-check-label textGray text-16 fw-medium" for="ratingAll">
                                            All Ratings
                                        </label>
                                    </div>
                                </li>
                                <li>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="rating" id="rating4up" value="4">
                                        <label class="form-check-label textGray text-16 fw-medium" for="rating4up">
                                            <i class="bi bi-star-fill text-yellow"></i> <i class="bi bi-star-fill text-yellow"></i> <i class="bi bi-star-fill text-yellow"></i> <i class="bi bi-star-fill text-yellow"></i> <i class="bi bi-star"></i> & Up
                                        </label>
                                    </div>
                                </li>
                                <li>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="rating" id="rating3up" value="3">
                                        <label class="form-check-label textGray text-16 fw-medium" for="rating3up">
                                            <i class="bi bi-star-fill text-yellow"></i> <i class="bi bi-star-fill text-yellow"></i> <i class="bi bi-star-fill text-yellow"></i> <i class="bi bi-star"></i> <i class="bi bi-star"></i> & Up
                                        </label>
                                    </div>
                                </li>
                                <li>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="rating" id="rating2up" value="2">
                                        <label class="form-check-label textGray text-16 fw-medium" for="rating2up">
                                            <i class="bi bi-star-fill text-yellow"></i> <i class="bi bi-star-fill text-yellow"></i> <i class="bi bi-star"></i> <i class="bi bi-star"></i> <i class="bi bi-star"></i> & Up
                                        </label>
                                    </div>
                                </li>
                                <li>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="rating" id="rating1up" value="1">
                                        <label class="form-check-label textGray text-16 fw-medium" for="rating1up">
                                            <i class="bi bi-star-fill text-yellow"></i> <i class="bi bi-star"></i> <i class="bi bi-star"></i> <i class="bi bi-star"></i> <i class="bi bi-star"></i> & Up
                                        </label>
                                    </div>
                                </li>
                            </ul>
                        </div>

                        <button id="applyFiltersButton" class="btn textLightPurple fw-bold w-100 py-3 rounded-3 mt-3">Apply Filters</button>
                    </div>
                </div>

                <div class="col-md-9">
                    <div class="d-flex align-items-center gap-3 pb-15 justify-content-end min-w-224 max-w-content">
                        <span class="textGray fw-medium me-2 text-nowrap">Sort By:</span>
                        <select id="sortSelect" class="form-select form-select-sm rounded-pill">
                            <option value="popularity" selected>Popularity</option>
                            <option value="newest">Newest</option>
                            <option value="priceLowToHigh">Price: Low to High</option>
                            <option value="priceHighToLow">Price: High to Low</option>
                        </select>
                    </div>

                    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4" id="allCoursesContainer">
                        @* All courses will be rendered here by JavaScript *@
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <p class="text-center text-22 textMain mt-5">No courses found. Add some courses via the Admin/Instructor panel!</p>
    }
</div>

<style>

    .grid-template-cols-3 {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    }

    .camp-image {
        width: 100%; /* Make the image responsive within its container */
        height: 180px;
        object-fit: cover; /* Ensure the image covers the area without distortion */
    }

    .rounded-pill {
        border-radius: 50rem !important; /* Make elements have pill shape */
    }

    .shadow-sm {
        box-shadow: 0 .125rem .25rem rgba(0,0,0,.075) !important; /* Bootstrap's small shadow */
    }

    .bg-white {
        background-color: #fff !important;
    }

    .overflow-hidden {
        overflow: hidden !important;
    }

    .p-4 {
        padding: 1.5rem !important; /* Roughly equivalent to Bootstrap's p-4 */
    }

    .text-start {
        text-align: left !important;
    }

    .d-inline-block {
        display: inline-block !important;
    }

    .pt-180 {
        padding-top: 180px;
    }

    .mb-111 {
        margin-bottom: 111px;
    }

    .mb-2 {
        margin-bottom: 0.5rem !important; /* Roughly equivalent to Bootstrap's mb-2 */
    }

    .d-flex {
        display: flex !important;
    }

    .justify-content-between {
        justify-content: space-between !important;
    }

    .align-items-center {
        align-items: center !important;
    }

    .me-1 {
        margin-right: 0.25rem !important; /* Bootstrap's me-1 */
    }

    .h-600 {
        height: 600px !important;
    }

    .text-14 {
        font-size: 0.875rem !important; /* Equivalent to 14px */
    }

    .del {
        text-decoration: line-through;
    }

    .position-relative {
        position: relative !important;
    }

    .position-absolute {
        position: absolute !important;
    }

    .end-0 {
        right: 0 !important;
    }

    .top-50 {
        top: 50% !important;
    }

    .translate-middle-y {
        transform: translateY(-50%) !important;
    }

    .ps-5 {
        padding-left: 3rem !important; /* Roughly Bootstrap's ps-5 */
    }

    .py-3 {
        padding-top: 1rem !important; /* Roughly Bootstrap's py-3 */
        padding-bottom: 1rem !important;
    }

    .form-control {
        display: block;
        width: 100%;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        font-weight: 400;
        line-height: 1.5;
        color: #212529;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid #ced4da;
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        border-radius: 0.25rem;
        transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
    }

        .form-control:focus {
            color: #212529;
            background-color: #fff;
            border-color: #86b7fe;
            outline: 0;
            box-shadow: 0 0 0 0.25rem rgba(13,110,253,.25);
        }

    .btn {
        display: inline-block;
        font-weight: 400;
        line-height: 1.5;
        color: #212529;
        text-align: center;
        text-decoration: none;
        vertical-align: middle;
        cursor: pointer;
        -webkit-user-select: none;
        -moz-user-select: none;
        user-select: none;
        background-color: transparent;
        border: 1px solid transparent;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        border-radius: 0.25rem;
        transition: color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;
    }

    .btn-primary {
        color: #fff;
        background-color: #0d6efd;
        border-color: #0d6efd;
    }

        .btn-primary:hover {
            color: #fff;
            background-color: #0b5ed7;
            border-color: #0a58ca;
        }

        .btn-primary:focus {
            color: #fff;
            background-color: #0b5ed7;
            border-color: #0a58ca;
            box-shadow: 0 0 0 0.25rem rgba(49,132,253,.5);
        }

        .btn-primary:active {
            color: #fff;
            background-color: #0a58ca;
            border-color: #0a53be;
        }

        .btn-primary:disabled {
            color: #fff;
            background-color: #0d6efd;
            border-color: #0d6efd;
        }

        .btn-primary:focus-visible {
            color: #fff;
            background-color: #0b5ed7;
            border-color: #0a58ca;
            box-shadow: 0 0 0 0.25rem rgba(49,132,253,.5);
        }

    .min-h-366 {
        min-height: 366px;
    }
</style>

@section Scripts {
    <script>
        // Convert C# model data to JavaScript arrays
        const allCoursesData = @Html.Raw(Json.Serialize(Model.Courses));
        const allCategoriesData = @Html.Raw(Json.Serialize(Model.Categories));

        let currentCourses = [];

        // Function to assign random durations and ratings (since they are not in the DB)
        function assignRandomCourseData(courses) {
            const random = new Math.seedrandom('kodla-course-seed');
            return courses.map(course => {
                course.randomDurationMonths = Math.floor(random() * 12) + 1;
                course.randomRating = (random() * 3 + 2).toFixed(1);
                course.randomPrice = Math.floor(random() * 250) + 50;
                course.instructorName = "John Hope Doe"; // Placeholder instructor name
                return course;
            });
        }

        // Function to render a single course card
        function renderCourseCard(course) {
            // Access properties from the DTO
            const categoryAbbr = course.category && course.category.name ? course.category.name.substring(0, Math.min(2, course.category.name.length)) : 'N/A';
            const ratingDisplay = course.randomRating > 0 ? `${course.randomRating} (Avg)` : 'No ratings yet';

            return `
                <div class="col">
                    <div class="card shadow-sm rounded-5 overflow-hidden">
                        <img src="https://placehold.co/400x180/e0e0e0/000000?text=${encodeURIComponent(course.title.replace(" ", "+"))}" class="card-img-top" alt="Course Image" style="height: 180px; object-fit: cover;">
                        <div class="card-body p-3 text-start">
                            <div class="bg-yellowBg textLightPurple fw-bold rounded-pill d-inline-block px-2 py-1 mb-2">${categoryAbbr}</div>
                            <h5 class="card-title textLightPurple fw-bold text-18 mb-1">${course.title}</h5>
                            <p class="card-text textGray text-16 fw-medium mb-2">${course.instructorName}</p>
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <i class="bi bi-clock text-yellow me-1"></i> <span class="text-14 fw-medium textGray">${course.randomDurationMonths} Months</span><br>
                                    <i class="bi bi-star-fill text-yellow me-1"></i> <span class="text-14 fw-medium textGray">${ratingDisplay}</span>
                                </div>
                                <div>
                                    <span class="textLightPurple fw-bold text-18">$${course.randomPrice}</span>
                                </div>
                            </div>
                        </div>
                        <div class="card-footer bg-transparent border-top-0 text-center">
                            <a href="/Course/Details/${course.id}" class="btn btn-outline-warning rounded-pill fw-bold py-2 px-4 textLightPurple">View Details</a>
                        </div>
                    </div>
                </div>
            `;
        }

        // Function to render all courses in a container
        function renderCourses(coursesToRender, containerId) {
            const container = document.getElementById(containerId);
            if (!container) return;

            container.innerHTML = '';
            if (coursesToRender.length === 0) {
                container.innerHTML = `<p class="text-center text-22 textMain mt-5 w-100">No courses found matching your criteria.</p>`;
                return;
            }
            coursesToRender.forEach(course => {
                container.innerHTML += renderCourseCard(course);
            });
        }

        // Function to populate category filters
        function populateCategoryFilters() {
            const container = document.getElementById('categoryFilterContainer');
            if (!container) return;
            container.innerHTML = '';

            allCategoriesData.forEach(category => {
                const li = document.createElement('li');
                li.innerHTML = `
                    <div class="form-check">
                        <input class="form-check-input category-filter" type="checkbox" value="${category.id}" id="category-${category.id}">
                        <label class="form-check-label textGray text-16 fw-medium" for="category-${category.id}">
                            ${category.name}
                        </label>
                    </div>
                `;
                container.appendChild(li);
            });
        }

        // Filtering and Sorting Logic
        function applyFiltersAndSort() {
            let filteredCourses = [...allCoursesData];

            // 1. Search Filter
            const searchTerm = document.getElementById('courseSearchInput').value.toLowerCase();
            if (searchTerm) {
                filteredCourses = filteredCourses.filter(course =>
                    course.title.toLowerCase().includes(searchTerm) ||
                    course.description.toLowerCase().includes(searchTerm)
                );
            }

            // 2. Category Filter
            const selectedCategories = Array.from(document.querySelectorAll('.category-filter:checked')).map(cb => parseInt(cb.value));
            if (selectedCategories.length > 0) {
                filteredCourses = filteredCourses.filter(course => selectedCategories.includes(course.categoryId));
            }

            // 3. Instructor Filter (using placeholder name for now)
            const instructorSearchTerm = document.getElementById('instructorSearchInput').value.toLowerCase();
            if (instructorSearchTerm) {
                filteredCourses = filteredCourses.filter(course =>
                    course.instructorName.toLowerCase().includes(instructorSearchTerm)
                );
            }

            // 4. Rating Filter
            const minRating = parseFloat(document.querySelector('input[name="rating"]:checked').value);
            if (minRating > 0) {
                filteredCourses = filteredCourses.filter(course => parseFloat(course.randomRating) >= minRating);
            }

            // 5. Sorting
            const sortBy = document.getElementById('sortSelect').value;
            switch (sortBy) {
                case 'popularity':
                    filteredCourses.sort((a, b) => parseFloat(b.randomRating) - parseFloat(a.randomRating));
                    break;
                case 'newest':
                    filteredCourses.sort((a, b) => b.id - a.id);
                    break;
                case 'priceLowToHigh':
                    filteredCourses.sort((a, b) => a.randomPrice - b.randomPrice);
                    break;
                case 'priceHighToLow':
                    filteredCourses.sort((a, b) => b.randomPrice - a.randomPrice);
                    break;
            }

            currentCourses = filteredCourses;
            renderCourses(currentCourses, 'allCoursesContainer');
        }

        // Event Listeners
        document.addEventListener('DOMContentLoaded', () => {
            assignRandomCourseData(allCoursesData);

            populateCategoryFilters();

            renderCourses(allCoursesData, 'allCoursesContainer');
            renderCourses(allCoursesData.slice(0, 3), 'featuredCoursesContainer');

            document.getElementById('searchButton').addEventListener('click', applyFiltersAndSort);
            document.getElementById('courseSearchInput').addEventListener('keyup', (event) => {
                if (event.key === 'Enter') {
                    applyFiltersAndSort();
                }
            });
            document.getElementById('instructorSearchInput').addEventListener('keyup', (event) => {
                if (event.key === 'Enter') {
                    applyFiltersAndSort();
                }
            });
            document.getElementById('applyFiltersButton').addEventListener('click', applyFiltersAndSort);
            document.getElementById('sortSelect').addEventListener('change', applyFiltersAndSort);

            document.querySelectorAll('.category-filter').forEach(checkbox => {
                checkbox.addEventListener('change', applyFiltersAndSort);
            });
            document.querySelectorAll('input[name="rating"]').forEach(radio => {
                radio.addEventListener('change', applyFiltersAndSort);
            });
        });
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/seedrandom/3.0.5/seedrandom.min.js"></script>
}